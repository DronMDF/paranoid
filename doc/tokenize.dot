// dot -Tpng -o tokenize.png tokenize.dot

// source code split by next tokens:
// 1. string (quoted in ")
// 2. char (quoted in ')
// 3. number (digit, continuous)
// 4. symbol (fill the list of symbol)
// 5. spaces (space, tabs, linefeed, etc...)
// 6. word (all non previous tokens, continuous)
// 7. newline (special token)

digraph tokenize {
	"init passthrought" -> string [label="\""]
	"init passthrought" -> char [label="\'"]
	"init passthrought" -> "number detect" [label="0"]
	"init passthrought" -> "number digital" [label="1..9"]
	"init passthrought" -> space [label="_"]
	"init passthrought" -> space [label="\\t"]
	"init passthrought" -> symbol [label="symbols"]
	"init passthrought" -> word [label="any"]
	
	string -> "string escape" [label="\\"]
	string -> "init passthrought" [label="\""]
	string -> string [label="any"]
	"string escape" -> string [label="any"]

	char -> "char escape" [label="\\"]
	char -> "init passthrought" [label="\'"]
	char -> char [label="any"]
	"char escape" -> char [label="any"]
	
	// float and suffixes i can detect over postprocess
	"number detect" -> "number hex" [label="x"]
	"number detect" -> "number octal" [label="0..7"]
	"number hex" -> "number hex" [label="0..9a..fA..F"]
	"number hex" -> "init passthrought" [label="any"]
	"number octal" -> "number octal" [label="0..7"]
	"number octal" -> "init passthrought" [label="any"]

	"number digital" -> "number digital" [label="0..9"]
	"number digital" -> "init passthrought" [label="any"]
	
	space -> space [label="_"]
	space -> space [label="\\t"]
	space -> "init passthrought" [label="any"]

	// Symbol only by one
	symbol -> "init passthrought" [label="any"]
	
	word -> "init passthrought" [label="space | symbols"]
	word -> word [label="any"]
}
